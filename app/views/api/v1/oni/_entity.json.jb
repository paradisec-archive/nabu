is_item = entity.entity_type == 'Item'

json = {
  id: is_item ? repository_item_url(entity.entity.collection, entity.entity) : repository_collection_url(entity.entity),
  name: entity.entity.title,
  description: entity.entity.description.truncate(256),
  entityType: is_item ? 'http://pcdm.org/models#Object' : 'http://pcdm.org/models#Collection',
  createst_at: entity.entity.created_at.iso8601,
  updated_at: entity.entity.updated_at.iso8601,
  language: (is_item ? entity.entity.content_languages : entity.entity.languages).map(&:name),
  counts: {
    objects: entity.has_attribute?(:items_count) ? entity.items_count : 0,
    files: entity.has_attribute?(:essences_count) ? entity.essences_count : 0
  }
}

if is_item
  json[:memberOf] = repository_collection_url(entity.entity.collection)
  json[:rootCollection] = repository_collection_url(entity.entity.collection)
end

if entity.private?
  json[:accessControl] = 'AccessControlList'
elsif entity.entity.access_condition.nil?
  json[:accessControl] = 'AuthorizationByInvitation'
elsif entity.entity.access_condition.name == 'Open (subject to agreeing to PDSC access conditions)'
  json[:accessControl] = 'AgreeToTerms'
else
  json[:accessControl] = 'Public'
end

# TODO:: add communicationMode

json[:mediaType] = entity.media_types.split(',') if entity.media_types
json[:access] = {
  metadata: true,
  content: can?(:read, is_item ? entity.entity.essences.first : entity.entity.items.first&.essences&.first)
}

if  defined? score || defined? highlights
  json[:searchExtra] ||= {}
  searchExtra = json[:searchExtra]

  searchExtra[:score] = score if defined? score
  searchExtra[:highlight] = highlights if defined? highlights
end

json
