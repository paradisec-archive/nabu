class_name = entity.class.name
is_item = class_name == 'Item'

json = {
  id: is_item ? repository_item_url(entity.collection, entity) : repository_collection_url(entity),
  name: entity.title,
  description: entity.description.truncate(256),
  conformsTo: "https://w3id.org/ldac/profile##{is_item ? 'Object' : 'Collection'}",
  recordType: is_item ? 'RepositoryObject' : 'RepositoryCollection',
  createst_at: entity.created_at.iso8601,
  updated_at: entity.updated_at.iso8601,
  extra: {
    language: (is_item ? entity.content_languages : entity.languages).map(&:name)
  },
  searchExtra: {}
}

if is_item
  json[:memberOf] = repository_collection_url(entity.collection)
  json[:root] = repository_collection_url(entity.collection)
end

extra = json[:extra]

extra[:objectCount] = entity.items_count if entity.has_attribute?(:items_count)
extra[:fileCount] = entity.essences_count if entity.has_attribute?(:essences_count)

if entity.private?
  extra[:accessControl] = 'AccessControlList'
elsif entity.access_condition.nil?
  extra[:accessControl] = 'AuthorizationByInvitation'
elsif entity.access_condition.name == 'Open (subject to agreeing to PDSC access conditions)'
  extra[:accessControl] = 'AgreeToTerms'
else
  extra[:accessControl] = 'Public'
end

# TODO:: add communicationMode

extra[:mediaType] = @mime_types
extra[:access] = {
  metadata: true,
  files: can?(:read, is_item ? entity.essences.first : entity.items.first.essences.first)
}

searchExtra = json[:searchExtra]

searchExtra[:score] = score if defined? score
searchExtra[:highlight] = highlights if defined? highlights

json
