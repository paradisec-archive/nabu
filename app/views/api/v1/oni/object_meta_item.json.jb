# NOTE: The functions in these jb builders need to have uinique names, We should solve this in a better way then relyin

def item_id
  repository_item_url(@data.collection, @data)
end

def item_rocrate_json
  {
    '@id': 'ro-crate-metadata.json',
    '@type': 'CreativeWork',
    conformsTo: {
      '@id': 'https://w3id.org/ro/crate/1.2-DRAFT'
    },
    about: {
      '@id': item_id
    }
  }
end

@people = Set.new
def item_person_json(user)
  id = user.party_identifier || (user.email && "mailto:#{user.email}") || "#person-#{user.id}"
  json = {
    '@id': id,
    '@type': 'Person',
    familyName: user.last_name,
    givenName: user.first_name,
    name: user.name
  }

  json[:email] = user.email if user.email
  @people.add(json)

  id
end

@essences = Set.new
def item_essence_json(essence)
  id = repository_essence_url(essence.collection, essence.item, essence.filename)

  json = {
    '@id': id,
    '@type': 'File',
    contentSize: essence.size,
    dateCreated: essence.created_at.to_date,
    dateModified: essence.updated_at.to_date,
    encodingFormat: essence.mimetype,
    name: essence.filename,
    filename: essence.filename,
    doi: essence.doi,
    bitrate: essence.bitrate,
    duration: essence.duration,
    channels: essence.channels,
    sampleRate: essence.samplerate
  }

  json.compact!

  @essences.add(json)

  id
end

@geos = Set.new
def item_geometry_json(shape)
  id = "#geo-#{shape.west_limit},#{shape.south_limit}-#{shape.east_limit},#{shape.north_limit}"
  coords = [
    "#{shape.west_limit} #{shape.north_limit}",
    "#{shape.east_limit} #{shape.north_limit}",
    "#{shape.east_limit} #{shape.south_limit}",
    "#{shape.west_limit} #{shape.south_limit}",
    "#{shape.west_limit} #{shape.north_limit}"
  ]

  json = {
    '@id': id,
    '@type': 'Geometry',
    asWKT: "POLYGON((#{coords.join(', ')}))"
  }

  @geos.add(json)

  id
end

@places = Set.new
def item_place_json(place, name = nil)
  id = name ? "#place-#{name}" : "#place-#{place.west_limit},#{place.south_limit}-#{place.east_limit},#{place.north_limit}"
  json = {
    '@id': id,
    '@type': 'Place',
    geo: {
      '@id': item_geometry_json(place)
    }
  }
  json[:name] = name if name

  @places.add(json)

  id
end

@countries = Set.new
def item_country_json(country)
  id = "#country-#{country.name}"
  country = {
    '@id': id,
    '@type': 'Country',
    code: country.code,
    name: country.name
  }
  @countries.add(country)

  id
end

@property_values = Set.new
def item_property_value_json(name, value)
  id = "#identifier_#{name}"

  property_value = {
    '@id': id,
    '@type': 'PropertyValue',
    name:,
    value:
  }
  @property_values.add(property_value)

  { '@id': id }
end

@languages = Set.new
def item_language_json(language)
  id = "#language-#{language.code}"
  json = {
    '@id': id,
    '@type': 'Language',
    code: language.code,
    geo: {
      '@id': item_geometry_json(language)
    },
    name: language.name
  }
  @languages.add(json)

  id
end

@access_conditions = Set.new
def item_access_condition_json(access_condition)
  id = "#license-#{access_condition.id}"
  json = {
    '@id': id,
    '@type': 'CreativeWork',
    name: access_condition.name
  }
  @access_conditions.add(json)

  id
end

@fields_of_research = Set.new
def item_field_of_research_json(field_of_research)
  id = "https://linked.data.gov.au/def/anzsrc-for/2020/#{field_of_research.identifier}"
  json = {
    '@id': id,
    '@type': 'DefinedTerm',
    name: field_of_research.name
  }
  @fields_of_research.add(json)

  id
end

@organisations = Set.new
def item_organisation_json(organisation)
  id = organisation.party_identifier

  json = {
    '@id': id,
    '@type': 'Organisation',
    name: organisation.name
  }
  @organisations.add(json)

  id
end

@funders = Set.new
def item_funder_json(grant)
  id = "#grant-#{grant.id}"

  json = {
    '@id': id,
    '@type': 'Organisation',
    name: grant.funding_body.name,
    description: "#{grant.grant_identifier} (#{grant.funding_body.name})"
  }
  @funders.add(json)

  id
end

data = {
  '@id': item_id,

  '@type': ['Data', 'Object', 'RepositoryObject'],
  conformsTo: { '@id': 'https://w3id.org/ldac/profile#Object' },

  additionalType: 'item',

  identifier: [
    item_property_value_json('domain', 'paradisec.org.au'),
    item_property_value_json('id', @data.full_identifier),
    item_property_value_json('itemIdentifier', @data.identifier),
    item_property_value_json('doi', @data.doi)
  ],

  name: @data.title,
  description: @data.description,

  contentLocation: [{
    '@id': item_place_json(@data, @data.region)
  }],

  dateCreated: @data.created_at.to_date,
  dateModified: @data.updated_at.to_date,
  datePublished: @data.updated_at.to_date,

  publisher: { '@id': item_person_json(@data.collector) },

  inLanguage: @data.content_languages.map { |language| { '@id': item_language_json(language) } },
  subjectLanguages: @data.subject_languages.map { |language| { '@id': item_language_json(language) } },
  countries: @data.countries.map { |country| { '@id': item_country_json(country) } }
}

if @admin_rocrate
  data[:comment] = @data.admin_comment
  data[:usageinfo] = data[:access_narrative]
  data[:private] = @data.private
  data['paradisec:admins'] = @data.admins.map { |admin| { '@id': item_person_json(admin) } }
end

data[:license] = { '@id': item_access_condition_json(@data.access_condition) } if @data.access_condition
data[:operator] = { '@id': item_person_json(@data.operator) } if @data.operator
data[:sourceOrganization] = item_organisation_json(@data.university) if @data.university

data[:memberOf] = { '@id': repository_collection_url(@data.collection), name: @data.collection.title  }
data[:root] = { '@id': repository_collection_url(@data.collection) }
data[:identifier] << item_property_value_json('collectionIdentifier', @data.collection.identifier)
data[:languageAsGiven] = @data.language
data[:originalMedia] = @data.original_media if @data.original_media
data[:originatedOn] = @data.originated_on.to_date if @data.originated_on
data[:hasPart] = @data.essences.map { |essence| { '@id': item_essence_json(essence) } }
data[:languageGenre] = @data.discourse_type.name if @data.discourse_type
if @data.data_categories
  data[:communicationMode] = @data.data_categories.map do |data_category|
    { '@id': "https://w3id.org/ldac/terms##{data_category.name}" }
  end
end

if @data.data_types
  data['paradisec:dataType'] = @data.data_types.map do |data_type|
    { '@id': "#datatype-#{data_type.id}", name: data_type.name }
  end
end

@data.item_agents.group_by(&:agent_role).map do |agent_role, item_agents|
  data[agent_role.name] = item_agents.map { |item_agent| { '@id': item_person_json(item_agent.user) } }
end

if @admin_rocrate
  data[:digitisedOn] = @data.digitised_on.to_date if @data.digitised_on
  data[:receivedOn] = @data.received_on.to_date if @data.received_on
  data[:bornDigital] = @data.born_digital
  data[:external] = @data.external
  data[:metadataExportable] = @data.metadata_exportable
  data[:tapesReturned] = @data.tapes_returned
  data['paradisec:users'] = @data.users.map { |user| { '@id': item_person_json(user) } }
  data['paradisec:dialect'] = @data.dialect
  data['paradisec:ingestNotes'] = @data.ingest_notes
  data['paradisec:originatedOnNarrative'] = @data.originated_on_narrative
  data['paradisec:tracking'] = @data.tracking
  data['paradisec:url'] = @data.url
end

data.compact!

# starts: here,
graph = []

graph << data
graph << item_rocrate_json

# Add all the references
graph.concat(@property_values.to_a)
graph.concat(@countries.to_a)
graph.concat(@access_conditions.to_a)
graph.concat(@people.to_a)
graph.concat(@essences.to_a)
graph.concat(@geos.to_a)
graph.concat(@places.to_a)
graph.concat(@languages.to_a)
graph.concat(@fields_of_research.to_a)
graph.concat(@organisations.to_a)
graph.concat(@funders.to_a)

{
  '@context': [
    'https://w3id.org/ro/crate/1.2-DRAFT/context',
    { '@vocab': 'http://schema.org/' },
    'http://purl.archive.org/language-data-commons/context.json',
    { Geometry: 'http://www.opengis.net/ont/geosparql#Geometry', asWKT: 'http://www.opengis.net/ont/geosparql#asWKT' },
    'https://w3id.org/ldac/context'
  ],
  '@graph': graph
}
