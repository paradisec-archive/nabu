- content_for :head do
  %link{:rel => 'canonical', :href => collection_url(@collection)}

-if session[:search_params]
  .left
    =link_to 'Return To Results', session[:search_from].merge(session[:search_params]), :class => 'button'

.right
  - if can? :update, @collection
    = link_to 'Edit collection', edit_collection_path(@collection), :class => 'button'

.clear

.twoup-1.column.span-12
  %fieldset
    %legend Collection details
    - if can? :manage, @collection
      .right
        = check_box_tag :checked, @collection.complete, @collection.complete, :disabled => true
        Ready for metadata export
        = check_box_tag :private, @collection.private, @collection.private, :disabled => true
        Private: Hide metadata from all users

    %table.form.show

      %tr
        %th Collection ID
        %td= @collection.identifier

      %tr
        %th Title
        %td= @collection.title

      %tr
        %th Description
        %td= h(@collection.description).gsub(/\n/, '<br/>').html_safe

      %tr
        %th Archive link
        %td= link_to(repository_collection_url(@collection))

      %tr
        %th Collector
        %td
          .left
            - if (can? :manage, @collection) && @collection.collector
              = link_to @collection.collector_name, admin_user_path(@collection.collector.id)
            - else
              = @collection.collector_name
          .right
            = link_to 'Find similar', URI::HTTP.build(host: 'www.google.com', path: '/search', query: URI.encode_www_form("q" => @collection.collector_name)).to_s

      %tr
        %th Operator
        %td
          - if (can? :manage, @collection) && @collection.operator
            = link_to @collection.operator_name, admin_user_path(@collection.operator.id)
          - else
            = @collection.operator_name

      %tr
        %th Originating university
        %td= @collection.university_name

      %tr
        %th Countries
        %td
          = render partial: 'countries/country_list', locals: {countries: @collection.countries}

      %tr
        %th Languages
        %td
          = render partial: 'languages/language_list', locals: {languages: @collection.languages}

      %tr
        %th Region / village
        %td= @collection.region

      %tr
        %th DOI
        %td= @collection.doi

      %tr
        %th Cite as
        %td= sanitize(@collection.citation, tags: %w(i)).html_safe

      %tr
        - if !@collection.coordinates?
          %th Map
          %td.missing No map data given - please add.
        - else
          %td.empty{:colspan => 2}
            - unless crawler_user_agent?
              .map{:data => {:south_limit => @collection.south_limit, :north_limit => @collection.north_limit, :west_limit => @collection.west_limit, :east_limit => @collection.east_limit}}
            - else
              %p.map-placeholder Map not displayed for automated requests


    %fieldset
      %legend Access information
      %table.form.show
        %tr
          %th Edit access
          %td
            - @collection.admins.each do |admin|
              = admin.name
              %br

        %tr
          %th Data access conditions
          %td= @collection.access_condition_name

        %tr
          %th Data access details
          %td= h(@collection.access_narrative).gsub(/\n/, '<br/>').html_safe



.twoup-2.column.span-12.last

  = render :partial => 'items'

  - if can? :manage, @collection
    %fieldset
      %legend Depositing information
      %table.form.show
        %tr
          %th Metadata source
          %td= @collection.metadata_source

        %tr
          %th Orthographic notes
          %td= h(@collection.orthographic_notes).gsub(/\n/, '<br/>').html_safe

        %tr
          %th Media
          %td= @collection.media

        - if @collection.has_deposit_form?
          %tr
            %th Deposit form
            %td= link_to 'Download', deposit_form_collection_path(@collection)

        %tr
          %th Date created
          %td= @collection.created_at

        %tr
          %th Date modified
          %td= @collection.updated_at

        %tr
          %th Comments
          %td= h(@collection.comments).gsub(/\n/, '<br/>').html_safe

    %fieldset
      %legend Admin information
      %table.form.show

        %tr
          %td.empty
          %td
            = check_box_tag :deposit_form_received, @collection.deposit_form_received, @collection.deposit_form_received, :disabled => true
            Deposit form received

        %tr
          %th Location data stored
          %td= h(@collection.tape_location).gsub(/\n/, '<br/>').html_safe

        %tr
          %th Field of research
          %td
            -if @collection.field_of_research
              = @collection.field_of_research.name_with_identifier

        %tr
          %th Funding Bodies
          %td
            %div
              -@collection.grants.group_by(&:funding_body).each do |fb, grants|
                %span.grant
                  %span.grant-name= fb.name
                  -if grants.any?(&:grant_identifier)
                    %span.grant-ids
                      %span Grant IDs:
                      -grants.each do |grant|
                        %span.grant-id
                          -if grant.grant_identifier.present?
                            -grant_id = @collection.full_grant_identifier(grant).strip
                            -if grant_id =~ /^http/
                              %a{href: grant_id}= grant.grant_identifier
                            -else
                              %span= grant_id
        %tr
          %th #Items in collections
          %td= number_to_human @num_items
        %tr
          %th #Items ready for XML export
          %td= number_to_human @num_items_ready
        %tr
          %th #Essence objects in items of collection
          %td= number_to_human @num_essences

    %fieldset
      %legend Metadata

      %table.form.show
        %tr
          %th RO-Crate Metadata
          %td
            %ul
              %li= link_to 'Download', public_rocrate_collection_path(@collection)
              - if admin_user_signed_in?
                %li= link_to 'Download (with private metadata)', private_rocrate_collection_path(@collection)

  .right
    - if can? :destroy, Collection
      - if @collection.items.any?
        %p.delete-warning
          %strong This collection contains items! If you choose to delete it they will be deleted too, as well as any content files they contain. This action can not be undone!
        = button_to 'Delete collection and contents', collection_path(@collection), :method => :delete, :data => { :confirm_delete_message => 'Do you really want to delete this collection and all of its items?' }, :class => 'button-red'
      - else
        = button_to 'Delete collection', collection_path(@collection), :method => :delete, :data => { :confirm_delete_message => 'Do you really want to delete this collection?' }, :class => 'button-red'

    - if can? :update, Collection
      = link_to 'Edit collection', edit_collection_path(@collection), :class => 'button right'

= render partial: 'terms/licence_footer', locals: {all_work: false}
