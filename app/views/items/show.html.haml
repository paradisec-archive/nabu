- content_for :head do
  %link{:rel => 'canonical', :href => collection_item_url(@collection, @item)}

-if session[:search_params]
  .left
    =link_to 'Return To Results', session[:search_from].merge(session[:search_params]), :class => 'button'

.right
  = link_to 'Previous item', '#', :class => 'button next_prev_button', :id => 'prev_button', :data => { 'identifier' => @item.prev_item&.full_identifier }

  - if can? :update, @item
    = link_to 'Edit item', edit_collection_item_path(@collection, @item), :class => 'button'

  - if can? :update, @item
    = link_to 'Duplicate Item', "/collections/#{@collection.identifier}/items/new?id=#{@item.id}", :class => 'button'

  = link_to 'Next item', '#', :class => 'button next_prev_button', :id => 'next_button',  :data => { 'identifier' => @item.next_item&.full_identifier }

.clear{:style => "padding-top: 7px"}

.twoup-1.column.span-12
  %fieldset
    %legend Item details
    - if can? :manage, @item
      .right
        = check_box_tag :private, @item.private, @item.private, :disabled => true
        Private: Hide metadata from all users

    %table.form.show
      %tr
        %th Item ID
        %td
          .left
            %span= @item.full_identifier
          .right<
            = link_to '(Collection Details)', @item.collection

      %tr
        %th Title
        %td= @item.title

      %tr
        %th Description
        %td= h(@item.description).gsub(/\n/, '<br/>').html_safe

      %tr
        %th Origination date
        %td= @item.originated_on

      %tr
        %th Origination date free form
        %td= @item.originated_on_narrative

      %tr
        %th Archive link
        %td= @item.external ? 'Item not owned by Paradisec' : link_to(repository_item_url(@collection, @item))

      %tr
        %th URL
        %td= @item.url

      %tr
        %th Collector
        %td
          .left
            - if (can? :manage, @item) && @item.collector
              = link_to @item.collector_name, admin_user_path(@item.collector.id)
            - else
              = @item.collector_name
          .right
            = link_to 'Find similar', URI::HTTP.build(host: 'www.google.com', path: '/search', query: URI.encode_www_form("q" => "#{@item.collector_name} #{@item.language}")).to_s

      %tr
        %th Countries
        %td
          = render partial: 'countries/country_list', locals: {countries: @item.countries}

      %tr
        %th Language as given
        %td= @item.language

      %tr
        %th Subject language(s)
        %td
          = render partial: 'languages/language_list', locals: {languages: @item.subject_languages}

      %tr
        %th Content language(s)
        %td
          = render partial: 'languages/language_list', locals: {languages: @item.content_languages}

      %tr
        %th Dialect
        %td= @item.dialect

      %tr
        %th Region / village
        %td= @item.region

      %tr
        - if !@item.coordinates?
          %th Map
          %td.missing No map data given - please add.
        - else
          %td.empty{:colspan => 2}
            - unless crawler_user_agent?
              .map{:data => {:south_limit => @item.south_limit, :north_limit => @item.north_limit, :west_limit => @item.west_limit, :east_limit => @item.east_limit, :static => true}}
            - else
              %p.map-placeholder Map not displayed for automated requests

      %tr
        %th Originating university
        %td= @item.university_name

      %tr
        %th Operator
        %td
          - if (can? :manage, @item) && @item.operator
            = link_to @item.operator_name, admin_user_path(@item.operator.id)
          - else
            = @item.operator_name

      %tr
        %th Data Categories
        %td
          - @item.data_categories.each do |category|
            = category.name
            %br
      %tr
        %th Data Types
        %td
          - @item.data_types.each do |type|
            = type.name
            %br

      %tr
        %th Discourse type
        %td= @item.discourse_type_name

      %tr
        %th Roles
        %td
          - @item.item_agents.each do |item_agent|
            == #{item_agent.user.name} : #{item_agent.agent_role.name}
            %br

      %tr
        %th DOI
        %td= @item.doi

      %tr
        %th Cite as
        %td= @item.citation.html_safe

.twoup-2.column.span-12.last

  %fieldset
    %legend{style: 'width: 100%;'}
      %span= "Content Files (#{@num_files})"
    - if @item.essences.any? { |essence| can? :read, essence }
      %h3.text-center{style: 'margin-fbottom: 0.5rem;'}
        %a{href: "#{Nabu::Application.config.viewer_url}/#/#{@collection.identifier}/#{@item.identifier}"} View file contents
    = render :partial => 'essences'

  %fieldset
    %legend Collection Information
    %table.form.show
      %tr
        %th Collection ID
        %td= link_to @item.collection.identifier, @item.collection

      %tr
        %th Collection title
        %td= @item.collection.title

      %tr
        %th Description
        %td= h(@item.collection.description).gsub(/\n/, '<br/>').html_safe

      %tr
        %th Countries
        %td
          = render partial: 'countries/country_list', locals: {countries: @item.collection.countries}

      %tr
        %th Languages
        %td
          = render partial: 'languages/language_list', locals: {languages: @item.collection.languages}
    - if can? :manage, @item
      %div.separated-message
        = form_tag inherit_details_collection_item_path(@collection, @item), method: :patch do
          -inherit_message = 'This will populate the country, location, language, operator, access conditions, access narrative, and region/village from the collection.'
          = submit_tag 'Inherit Details from Collection', class: 'button', title: inherit_message, 'data-confirm' => "#{inherit_message}\n\nDo you want to continue?"
          = check_box_tag :override_existing
          = label_tag :override_existing, 'Override Existing Values?'

    %fieldset
      %legend Access Information
      %table.form.show
        %tr
          %th Edit access
          %td
            - @item.admins.each do |admin|
              = admin.name
              %br

        %tr
          %th View/Download access
          %td
            - @item.users.each do |user|
              = user.name
              %br

        %tr
          %th Data access conditions
          %td= @item.access_condition_name

        %tr
          %th Data access narrative
          %td= h(@item.access_narrative).gsub(/\n/, '<br/>').html_safe

  - if can? :manage, @item
    %fieldset
      %legend Archive Information

      %table.form.show
        %tr
          %td.empty
          %td
            = check_box_tag :checked, @item.metadata_exportable, @item.metadata_exportable, :disabled => true
            Ready for metadata export
        %tr
          %td.empty
          %td
            = check_box_tag :checked, @item.born_digital, @item.born_digital, :disabled => true
            Born digital
        %tr
          %td.empty
          %td
            = check_box_tag :checked, @item.tapes_returned, @item.tapes_returned, :disabled => true
            Tapes returned to depositor
        %tr
          %th Original media
          %td= @item.original_media

        %tr
          %th Data received
          %td= @item.received_on

        %tr
          %th Date digitised
          %td= @item.digitised_on

        %tr
          %th Ingest notes
          %td= h(@item.ingest_notes).gsub(/\n/, '<br/>').html_safe

        %tr
          %th Metadata imported
          %td= @item.metadata_imported_on

        %tr
          %th Metadata exported
          %td= @item.metadata_exported_on

        %tr
          %th Tracking
          %td= @item.tracking

  - if can? :manage, @item
    %fieldset
      %legend Admin Information

      %table.form.show
        %tr
          %th Record created
          %td= @item.created_at
        %tr
          %th Record modified
          %td= @item.updated_at

        %tr
          %th Comments
          %td= h(@item.admin_comment).gsub(/\n/, '<br/>').html_safe

  %fieldset
    %legend Metadata

    %table.form.show
      %tr
        %th RO-Crate Metadata
        %td
          %ul
            %li= link_to 'Download', public_rocrate_collection_item_path(@collection, @item)
            - if admin_user_signed_in?
              %li= link_to 'Download (with private metadata)', private_rocrate_collection_item_path(@collection, @item)

  %fieldset
    %legend Comments

    = render :partial => 'comments/new', :locals => { :item => @item }
    = render :partial => 'comments/comments', :locals => {:comments => @item.comments.approved}

    .right
      - if can? :destroy, @item
        - if @item.essences.any?
          %p.delete-warning
            %strong This item contains content files. If you choose to delete it, they will be deleted too and this action can not be undone!
          = button_to 'Delete item and contents', collection_item_path(@collection, @item), :method => :delete, :data => { :confirm_delete_message => 'Do you really want to delete this item and all of its content files?' }, :class => 'button-red'
        - else
          = button_to 'Delete item', collection_item_path(@collection, @item), :method => :delete, :data => { :confirm_delete_message => 'Do you really want to delete this item?' }, :class => 'button-red'

      - if can? :update, @item
        = link_to 'Edit item', edit_collection_item_path(@collection, @item), :class => 'button right', style: 'margin-left: 0.4rem;'

= render partial: 'terms/licence_footer', locals: {all_work: false}
