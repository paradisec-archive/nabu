- content_for :page_scripts do
  = javascript_include_tag "custom/advanced_search", "data-turbo-track": "reload", type: "module", defer: true

%h1 Advanced Search Items

.right
  = link_to 'Basic Search', search_items_path
.clear

- if params.to_unsafe_h.size > 2
  %p== #{@search.total_count} search results (#{@search.took} ms)

  = render partial: 'search_results', locals: {show_exclusions: true}

  %br
  .clear

  -if can? :bulk_edit, Item
    .right
      = link_to 'Bulk edit results', bulk_update_items_path(params.permit!.delete_if {|p| ['action', 'controller'].include? p } )

= hidden_field_tag(:existing_exclusions, params[:exclusions], id: 'existing_exclusions')

= form_tag advanced_search_items_path, :method => :get, :class => 'no-empty-submit', id: 'advanced_search_form' do
  = hidden_field_tag(:exclusions, params[:exclusions], class: 'exclusions')
  - if params[:per_page]
    = hidden_field_tag :per_page, params[:per_page]

  .twoup-1.column.span-12
    %fieldset
      %legend Item details
      .right
        = select_tag :private, options_for_select([['True', 'true'], ['False', 'false']], params[:private]), :include_blank => true
        = label_tag :private, 'Private: Hide metadata from all users'
      .clear

      %table.form
        %tr
          %th= label_tag :full_identifier, 'Item ID'
          %td= text_field_tag :full_identifier, params[:full_identifier], :class => 'short'

        %tr
          %th
            = label_tag :title
            %br
            %i (published)
          %td
            = text_field_tag :title, params[:title], {:placeholder => 'Please enter a title'}
            %br
            Blank
            = check_box_tag :title_blank, true, params[:title_blank]

        %tr
          %th
            = label_tag :description
            %br
            %i (published)
          %td
            = text_field_tag :description, params[:description]
            %br
            Blank
            = check_box_tag :description_blank, true, params[:description_blank]

        %tr
          %th= label_tag :originated_on, 'Origination date'
          %td
            = text_field_tag :originated_on, params[:originated_on], :class => 'dateinput short'
            %br
            Blank
            = check_box_tag :originated_on_blank, true, params[:originated_on_blank]

        %tr
          %th= label_tag :originated_on_narrative, 'Origination date free form'
          %td
            = text_field_tag :originated_on_narrative, params[:originated_on_narrative]
            %br
            Blank
            = check_box_tag :originated_on_narrative_blank, true, params[:originated_on_narrative_blank]

        %tr
          %th= label_tag :external, 'Item not held by Paradisec'
          %td= select_tag :external, options_for_select([['True', 'true'], ['False', 'false']], params[:external]), :include_blank => true

        %tr
          %th= label_tag :url, 'URL'
          %td
            = text_field_tag :url, params[:url]
            %br
            Blank
            = check_box_tag :url_blank, true, params[:url_blank]

        %tr
          %th= label_tag :collector_id
          %td= user_select_tag :collector_id, placeholder: 'Choose a collector...'

        %tr
          %th= label_tag 'country_ids[]', 'Countries'
          %td= country_select_tag 'country_ids[]'

        %tr
          %th= label_tag :language, 'Language as given'
          %td
            = text_field_tag :language, params[:language]
            %br
            Blank
            = check_box_tag :language_blank, true, params[:language_blank]

        %tr
          %th= label_tag 'subject_language_ids[]', 'Subject languages'
          %td= language_select_tag 'subject_language_ids[]', 'extra-name': 'country_ids', 'extra-selector': '#item_country_ids', multiple: true

        %tr
          %th= label_tag 'content_language_ids[]', 'Content language'
          %td= language_select_tag 'content_language_ids[]', 'extra-name': 'country_ids', 'extra-selector': '#item_country_ids', multiple: true

        %tr
          %th= label_tag :dialect
          %td
            = text_field_tag :dialect, params[:dialect]
            %br
            Blank
            = check_box_tag :dialect_blank, true, params[:dialect_blank]

        %tr
          %th= label_tag :region, 'Region / village'
          %td
            = text_field_tag :region, params[:region]
            %br
            Blank
            = check_box_tag :region_blank, true, params[:region_blank]

        %tr
          %th= label_tag :university_id, 'Originating university'
          %td= select_tag :university_id, options_from_collection_for_select(University.alpha, :id, :name, params[:university_id]), :include_blank => true, :data => {:placeholder => 'Choose a university...'}, :class => 'select2'


        %tr
          %th= label_tag :operator_id
          %td= user_select_tag :operator_id, :placeholder => 'Choose an operator...'

        %tr
          %th= label_tag 'data_category_ids[]', 'Data Categories'
          -# REVIEW: Why is data_category used as a class?
          %td= select_tag 'data_category_ids[]', params[:data_category_ids], :data => {:placeholder => 'Choose a category...', 'ajax--url' => data_categories_path, :multiple => true}, :class => 'select2 data_category'

        %tr
          %th= label_tag 'data_type_ids[]', 'Data Types'
          %td= select_tag 'data_type_ids[]', params[:data_type_ids], :data => {:placeholder => 'Choose a type...', 'ajax--url' => data_types_path, :multiple => true}, :class => 'select2'

        %tr
          %th= label_tag :discourse_type_id
          %td= select_tag :discourse_type_id, options_from_collection_for_select(DiscourseType.alpha, :id, :name, params[:discourse_type_id]), :include_blank => true, :data => {:placeholder => 'Choose a discourse...'}, :class => 'select2'

        %tr
          %th= label_tag 'agent_ids[]', 'Agents'
          %td= user_select_tag 'agent_ids[]', placeholder: 'Choose an agent...', multiple: true

    %fieldset
      %legend Essence Details
      %table.form
        %tr
          %th= label_tag :no_files, 'No files'
          %td= check_box_tag :no_files, 'true', params[:no_files]
        %tr
          %th= label_tag :filename, 'Filename'
          %td= text_field_tag :filename, params[:filename]
        %tr
          %th= label_tag :mimetype, 'Mime Type'
          %td= mimetype_select_tag :mimetype
        %tr
          %th= label_tag :framesPerSecond, 'FPS'
          %td= text_field_tag :framesPerSecond, params[:framesPerSecond]
        %tr
          %th= label_tag :samplerate, 'Sample Rate'
          %td= text_field_tag :samplerate, params[:samplerate]
        %tr
          %th= label_tag :channels, 'Channels'
          %td= text_field_tag :channels, params[:channels]

  .twoup-2.column.span-12.last
    %fieldset
      %legend Map Search
      %table.form
        %tr
          %td{:colspan => 2}
            = hidden_field_tag :north_limit, params[:north_limit], :class => 'north_limit'
            = hidden_field_tag :south_limit, params[:south_limit], :class => 'south_limit'
            = hidden_field_tag :east_limit,  params[:east_limit],  :class => 'east_limit'
            = hidden_field_tag :west_limit,  params[:west_limit],  :class => 'west_limit'
            - unless crawler_user_agent?
              .map{:data => {:editable => 'true'}}
            - else
              %p.map-placeholder Map not displayed for automated requests

    %fieldset
      %legend Archive information
      %table.form
        %tr
          %th Ready for metadata export:
          %td= select_tag :metadata_exportable, options_for_select([['True', 'true'], ['False', 'false']], params[:metadata_exportable]), :include_blank => true

        %tr
          %th= label_tag :born_digital
          %td= select_tag :born_digital, options_for_select([['True', 'true'], ['False', 'false']], params[:born_digital]), :include_blank => true

        %tr
          %th Tapes returned to depositor:
          %td= select_tag :tapes_returned, options_for_select([['True', 'true'], ['False', 'false']], params[:tapes_returned]), :include_blank => true

        %tr
          %th= label_tag :original_media
          %td
            = text_field_tag :original_media, params[:original_media]
            %br
            Blank
            = check_box_tag :original_media_blank, true, params[:original_media_blank]

        %tr
          %th Date received:
          %td
            = text_field_tag :received_on, params[:received_on], :class => 'dateinput short', :value => params[:received_on]
            %br
            Blank
            = check_box_tag :received_on_blank, true, params[:received_on_blank]

        %tr
          %th Date digitised:
          %td
            = text_field_tag :digitised_on, params[:digitised_on], :class => 'dateinput short', :value => params[:digitised_on]
            %br
            Blank
            = check_box_tag :digitised_on_blank, true, params[:digitised_on_blank]

        %tr
          %th= label_tag :ingest_notes
          %td
            = text_area_tag :ingest_notes, params[:ingest_notes]
            %br
            Blank
            = check_box_tag :ingest_notes_blank, true, params[:ingest_notes_blank]

        %tr
          %th Metadata imported:
          %td
            = text_field_tag :metadata_imported_on, params[:metadata_imported_on], :class => 'dateinput short'
            %br
            Blank
            = check_box_tag :metadata_imported_on_blank, true, params[:metadata_imported_on_blank]

        %tr
          %th Metadata exported:
          %td
            = text_field_tag :metadata_exported_on, params[:metadata_exported_on], :class => 'dateinput short'
            %br
            Blank
            = check_box_tag :metadata_exported_on_blank, true, params[:metadata_exported_on_blank]

        %tr
          %th= label_tag :tracking
          %td
            = text_field_tag :tracking, params[:tracking]
            %br
            Blank
            = check_box_tag :tracking_blank, true, params[:tracking_blank]

    %fieldset
      %legend Admin information
      %table.form
        %tr
          %th Record created
          %td
            = text_field_tag :created_at, params[:created_at], :class => 'dateinput short'
            %br
            Blank
            = check_box_tag :created_at_blank, true, params[:created_at_blank]

        %tr
          %th Record modified
          %td
            = text_field_tag :updated_at, params[:updated_at], :class => 'dateinput short'
            %br
            Blank
            = check_box_tag :updated_at_blank, true, params[:updated_at_blank]

        %tr
          %th= label_tag 'admin_ids[]', 'Edit access'
          %td= user_select_tag 'admin_ids[]', placeholder: 'Choose an admin...', multiple: true

        %tr
          %th= label_tag 'user_ids[]', 'Read/Download access'
          %td= user_select_tag 'user_ids[]', placeholder: 'Choose a user...', multiple: true

        %tr
          %th= label_tag :access_condition, 'Data access conditions'
          %td= select_tag :access_condition_id, options_from_collection_for_select(AccessCondition.alpha, :id, :name, params[:access_condition_id]), :include_blank => true, :data => {:placeholder => 'Choose a data access condition...'}, :class => 'select2'

        %tr
          %th= label_tag :access_narrative, 'Data access details'
          %td
            = text_area_tag :access_narrative, params[:access_narrative], :rows => 5
            %br
            Blank
            = check_box_tag :access_narrative_blank, true, params[:access_narrative_blank]

        %tr
          %th= label_tag :admin_comment, 'Comments'
          %td
            = text_area_tag :admin_comment, params[:admin_comment], :rows => 5
            %br
            Blank
            = check_box_tag :admin_comment_blank, true, params[:admin_comment_blank]


    = submit_tag 'Search', :name => nil
    = link_to 'Clear', advanced_search_items_path, class: "button"

  .clear

  %p
    = link_to 'Export CSV (visible results)', advanced_search_items_path(:format => :csv, :params => params.permit!) if can? :search_csv, Item
  %p
    = link_to 'Export CSV (all results)', advanced_search_items_path(:format => :csv, :params => params.permit!.merge(:export_all => true)) if can? :search_csv, Item
